{"version":3,"sources":["components/Footer.js","pages/Home.js","serviceWorker.js","index.js"],"names":["Footer","className","href","class","Component","Home","style","display","avgTypingDelay","startDelay","cursor","element","blink","hideWhenDone","hideWhenDoneDelay","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wSAkCeA,G,mLA5BX,OACI,yBAAKC,UAAU,UACX,gCACI,6BAAM,6BACN,uBAAGC,KAAK,2BACJ,uBAAGC,MAAM,0BAHjB,QAKI,uBAAGD,KAAK,kCACJ,uBAAGC,MAAM,wBANjB,QAQI,uBAAGD,KAAK,sCACJ,uBAAGC,MAAM,yBATjB,QAWI,uBAAGD,KAAK,uDACJ,uBAAGC,MAAM,0BAZjB,QAcI,uBAAGD,KAAK,gCACJ,uBAAGC,MAAM,0BAfjB,QAiBI,uBAAGD,KAAK,wCACJ,uBAAGC,MAAM,2BAlBjB,c,GAJSC,cC0BNC,E,uKAtBX,OACE,yBAAKJ,UAAU,QACX,yBAAKA,UAAU,UACT,yBAAKA,UAAU,YACX,yBAAKA,UAAU,QACX,uBAAGE,MAAM,uBAAuBG,MAAO,CAACC,QAAS,SAC7C,kBAAC,IAAD,CACMC,eAAgB,IAChBC,WAAY,IACZC,OAAQ,CAAEC,QAAS,IAAKC,OAAO,EAAMC,cAAc,EAAMC,mBAAmB,IAC5E,+CAM1B,kBAAC,EAAD,W,GAlBWV,aCMCW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8c501e13.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './Footer.css';\n\nclass Footer extends Component {\n  render() {\n    return (\n        <div className=\"Footer\">\n            <center>\n                <br /><br />\n                <a href=\"mailto:asnqln@gmail.com\">\n                    <i class=\"fa fa-2x fa-envelope\"></i>\n                </a> &nbsp;\n                <a href=\"https://github.com/nandan-unni\">\n                    <i class=\"fa fa-2x fa-github\"></i>\n                </a> &nbsp;\n                <a href=\"https://twitter.com/Nandanunni_A_S\">\n                    <i class=\"fa fa-2x fa-twitter\"></i>\n                </a> &nbsp;\n                <a href=\"http://www.linkedin.com/in/nandanunni-a-s-258b10193\">\n                    <i class=\"fa fa-2x fa-linkedin\"></i>\n                </a> &nbsp;\n                <a href=\"https://t.me/nandanunni_a_s/\">\n                    <i class=\"fa fa-2x fa-telegram\"></i>\n                </a> &nbsp;\n                <a href=\"https://www.instagram.com/u.n.n.i._/\">\n                    <i class=\"fa fa-2x fa-instagram\"></i>\n                </a> &nbsp;\n            </center>\n        </div>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport Typist from 'react-typist';\n\nimport './Home.css';\nimport Footer from '../components/Footer'\n\nclass Home extends Component {\n  render() {\n    return (\n      <div className=\"Home\">\n          <div className=\"header\">\n                <div className=\"terminal\">\n                    <div className=\"name\">\n                        <i class=\"fa fa-2x fa-terminal\" style={{display: \"flex\"}}>\n                            <Typist \n                                  avgTypingDelay={100} \n                                  startDelay={200}\n                                  cursor={{ element: \"_\", blink: true, hideWhenDone: true, hideWhenDoneDelay: false}}>\n                                  <b> Nandanunni</b>\n                            </Typist>\n                        </i>\n                    </div>\n                </div>\n          </div>\n        <Footer></Footer>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './pages/Home';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}